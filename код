from multiprocessing import Queue, Process
from multiprocessing.queues import Empty
from dataclasses import dataclass
from time import sleep
import requests

# Формат управляющих команд
@dataclass
class ControlEvent:
    operation: str

@dataclass
class Event:
    source: str  # отправитель
    destination: str  # получатель
    operation: str  # чего хочет (запрашиваемое действие)
    parameters: str  # с какими параметрами

# Класс управления очередями
class QueueManage(Process):
    def __init__(self, events_q: Queue):
        super().__init__()
        self._events_q = events_q
        self._control_q = Queue()
        self._entity_queues = {}
        self._force_quit = False

    def add_entity_queue(self, entity_id: str, queue: Queue):
        print(f"[ИНФО] регистрируем сущность {entity_id}")
        self._entity_queues[entity_id] = queue

    def _proceed(self, event):
        try:
            dst_q: Queue = self._entity_queues[event.destination]
            dst_q.put(event)
        except Exception as e:
            print(f"[ИНФО] ошибка выполнения запроса {e}")

    def run(self):
        print("[ИНФО] старт")
        while not self._force_quit:
            event = None
            try:
                event = self._events_q.get_nowait()
                self._proceed(event)
            except Empty:
                sleep(0.5)
            except Exception as e:
                print(f"[ИНФО] ошибка обработки {e}")
            self._check_control_q()
        print("[ИНФО] завершение работы")

    def stop(self):
        request = ControlEvent(operation="stop")
        self._control_q.put(request)

    def _check_control_q(self):
        try:
            request: ControlEvent = self._control_q.get_nowait()
            if isinstance(request, ControlEvent) and request.operation == "stop":
                self._force_quit = True
        except Empty:
            pass


class Communication(Process):
    def __init__(self, events_queue: Queue):
        super().__init__()
        self.events_queue = events_queue
        self._own_queue = Queue()

    def entity_queue(self):
        return self._own_queue

    def run(self):
        print(f"[{self.__class__.__name__}] старт")
        task = "new_task_parameters"  # Пример задания
        event = Event(
            source=self.__class__.__name__,
            destination="ControlSystem",
            operation="new_task",
            parameters=task,
        )
        self.events_queue.put(event)
        sleep(1)  # Позволяем системе поработать
        print(f"[{self.__class__.__name__}] завершение работы")


class ControlSystem(Process):
    def __init__(self, events_queue: Queue):
        super().__init__()
        self.events_queue = events_queue
        self._own_queue = Queue()
        self._control_q = Queue()
        self._force_quit = False
        self._targets_points = []
        self._current_coordinates = None
        self._current_speed = 30
        self._current_direction = 90
        self.max_speed = 30

    def entity_queue(self):
        return self._own_queue

    def run(self):
        print(f"[{self.__class__.__name__}] старт")
        while not self._force_quit:
            self._check_event_queue()
            self.mission_move()
            sleep(0.1)  # Для предотвращения слишком частой проверки
        print(f"[{self.__class__.__name__}] завершение работы")
    
    def mission_move(self):
        # Движение к целевой точке, этот код должен быть адаптирован под вашу логику
        if self._current_coordinates is not None and self._targets_points:
            target_point = self._targets_points[0]
            print(f"Двигаюсь к точке: {target_point}")
            # Здесь можно будет обновить скорость и направление
            data = {"speed": self._current_speed, "direction": self._current_direction}
            event = Event(
                source=self.__class__.__name__,
                destination="Servos",
                operation="set_velocity",
                parameters=data,
            )
            self.events_queue.put(event)
    
    def _check_event_queue(self):
        try:
            event: Event = self._own_queue.get_nowait()
            if event.operation == "new_task":
                print(f"[{self.__class__.__name__}] получено новое задание: {event.parameters}")
                self._targets_points.append({"x": 10, "y": 20})  # Пример точки
            if event.operation == "get_coordinates":
                self._current_coordinates = event.parameters
        except Empty:
            pass

    def stop(self):
        request = ControlEvent(operation="stop")
        self._control_q.put(request)

    def _check_control_q(self):
        try:
            request: ControlEvent = self._control_q.get_nowait()
            if isinstance(request, ControlEvent) and request.operation == "stop":
                self._force_quit = True
        except Empty:
            pass


class Navigation(Process):
    def __init__(self, events_queue: Queue):
        super().__init__()
        self.events_queue = events_queue
        self._own_queue = Queue()
        self._control_q = Queue()
        self._force_quit = False

    def entity_queue(self):
        return self._own_queue

    def run(self):
        print(f"[{self.__class__.__name__}] старт")
        while not self._force_quit:
            sleep(1)  # Периодически делаем запрос
            # Выполним запрос на получение координат
            coordinates = {"x": 5, "y": 15}  # Пример координат, замените на запрос к вашему API
            event = Event(
                source=self.__class__.__name__,
                destination="ControlSystem",
                operation="get_coordinates",
                parameters=coordinates,
            )
            self.events_queue.put(event)

    def stop(self):
        request = ControlEvent(operation="stop")
        self._control_q.put(request)

    def _check_control_q(self):
        try:
            request: ControlEvent = self._control_q.get_nowait()
            if isinstance(request, ControlEvent) and request.operation == "stop":
                self._force_quit = True
        except Empty:
            pass


class Servos(Process):
    def __init__(self, events_queue: Queue):
        super().__init__()
        self.events_queue = events_queue
        self._own_queue = Queue()
        self._control_q = Queue()
        self._force_quit = False

    def entity_queue(self):
        return self._own_queue

    def run(self):
        print(f"[{self.__class__.__name__}] старт")
        while not self._force_quit:
            self._check_event_queue()
            sleep(0.1)

    def stop(self):
        request = ControlEvent(operation="stop")
        self._control_q.put(request)

    def _check_event_queue(self):
        try:
            event: Event = self._own_queue.get_nowait()
            if event.operation == "set_velocity":
                print(f"[{self.__class__.__name__}] Установка скорости: {event.parameters}")
                # Тут можно выполнить HTTP-запрос на ваш API для установки скорости
        except Empty:
            pass

    def _check_control_q(self):
        try:
            request: ControlEvent = self._control_q.get_nowait()
            if isinstance(request, ControlEvent) and request.operation == "stop":
                self._force_quit = True
        except Empty:
            pass


class Drill(Process):
    def __init__(self, events_queue: Queue):
        super().__init__()
        self.events_queue = events_queue
        self._own_queue = Queue()
        self._control_q = Queue()
        self._force_quit = False

    def entity_queue(self):
        return self._own_queue

    def run(self):
        print(f"[{self.__class__.__name__}] старт")
        while not self._force_quit:
            self._check_event_queue()
            sleep(0.1)

    def stop(self):
        request = ControlEvent(operation="stop")
        self._control_q.put(request)

    def _check_event_queue(self):
        try:
            event: Event = self._own_queue.get_nowait()
            if event.operation == "drilling":
                print(f"[{self.__class__.__name__}] Бурим тоннель...")
        except Empty:
            pass

    def _check_control_q(self):
        try:
            request: ControlEvent = self._control_q.get_nowait()
            if isinstance(request, ControlEvent) and request.operation == "stop":
                self._force_quit = True
        except Empty:
            pass


if __name__ == "__main__":
    events_queue = Queue()

    queue_manager = QueueManage(events_queue)
    communication = Communication(events_queue)
    control_system = ControlSystem(events_queue)
    navigation = Navigation(events_queue)
    servos = Servos(events_queue)
    drill = Drill(events_queue)

    queue_manager.add_entity_queue("Communication", communication.entity_queue())
    queue_manager.add_entity_queue("ControlSystem", control_system.entity_queue())
    queue_manager.add_entity_queue("Navigation", navigation.entity_queue())
    queue_manager.add_entity_queue("Servos", servos.entity_queue())
    queue_manager.add_entity_queue("Drill", drill.entity_queue())

    queue_manager.start()
    communication.start()
    control_system.start()
    navigation.start()
    servos.start()
    drill.start()

    sleep(120)  # Общее время работы системы
    queue_manager.stop()

    # Завершение процессов
    communication.stop()
    control_system.stop()
    navigation.stop()
    servos.stop()
    drill.stop()

    communication.join()
    control_system.join()
    navigation.join()
    servos.join()
    drill.join()
